#!/usr/bin/env bash

set -euo pipefail

ROOT_DIR=/opt/halyard
REPO_DIR="$ROOT_DIR/repo"
ORG_URL="${ORG_URL:-https://github.com/halyard}"

function darwin() {
    REPO_NAME=halyard

    # https://docs.puppet.com/puppet/latest/about_agent.html
    # https://downloads.puppetlabs.com/mac/puppet6/10.14/x86_64/
    puppet_version=6.4.1-1
    puppet_checksum=160d6a0eb781afe02c4bfdb089e74d4c307a1cd57b835c9fba7c58637e4ea12f

    echo 'Checking for pending software updates'
    softwareupdate -i -a

    echo 'Checking for Xcode command line tools'
    set +e
    xcode-select -p &>/dev/null
    if [ "$?" != "0" ] ; then
        echo 'Please follow the prompt to install Xcode command line tools'
        xcode-select --install &>/dev/null
        while true ; do
            sleep 5
            xcode-select -p &>/dev/null && break
        done
    fi
    set -e

    if [[ ! -e /opt/puppetlabs/bin/puppet ]] ; then
        puppet_tmpdir="$(mktemp -d)"
        puppet_url="https://downloads.puppetlabs.com/mac/puppet6/10.14/x86_64/puppet-agent-${puppet_version}.osx10.14.dmg"
        puppet_dmg="${puppet_tmpdir}/puppet-agent.dmg"
        puppet_mount="${puppet_tmpdir}/puppet-agent.volume"
        puppet_installer="${puppet_mount}/puppet-agent-${puppet_version}-installer.pkg"
        curl -sLo "${puppet_dmg}" "${puppet_url}"
        actual_checksum="$(shasum -a 256 "${puppet_dmg}" | cut -d' ' -f1)"
        if [[ "${actual_checksum}" != "${puppet_checksum}" ]] ; then
            echo "Checksum mismatch on puppet download: ${puppet_dmg} / ${puppet_url}"
            exit 1
        fi
        hdiutil attach -puppetstrings -nobrowse -readonly -noidme -mountpoint "${puppet_mount}" "${puppet_dmg}"
        installer -pkg "${puppet_installer}" -target /
        hdiutil unmount "${puppet_mount}"
        rm -rf "${puppet_dmg}"
    fi
}

function arch() {
    REPO_NAME=goblin
    pacman -Syu --noconfirm --needed puppet git
}


mkdir -p "$REPO_DIR"

uname="$(uname)"
case "$uname" in
    Darwin)
        darwin
        ;;
    Linux)
        distro="$(grep ID= /etc/os-release | cut -d= -f2)"
        case "$distro" in
            archarm|arch)
                arch
                ;;
            *)
                echo "Support for this Linux distro ($distro) not yet implemented"
                exit 1
                ;;
        esac
        ;;
    *)
        echo "Support for $uname not implemented"
        exit 1
        ;;
esac

if [[ -e "$REPO_DIR/README.md" ]] ; then
    (cd "$REPO_DIR" && git pull && git submodule update --init)
else
    REPO_URL="$ORG_URL/$REPO_NAME"
    git clone --recursive "$REPO_URL" "$REPO_DIR"
fi
$REPO_DIR/meta/puppet-run

