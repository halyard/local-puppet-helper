#!/usr/bin/env ruby

require 'date'
require 'fileutils'

OPT_PUPPET_BIN = '/opt/puppetlabs/puppet/bin'
ROOT_PATH = '/opt/halyard'
LOCKDIR_NAME = '.lock'

PUPPET_ENV = ENV['PUPPET_ENV'] || 'production'
PUPPET_DEBUG = ENV['PUPPET_DEBUG'] ? true : false
PUPPET_PROFILE = ENV['PUPPET_PROFILE'] ? true : false

ENV['PATH'] = "#{OPT_PUPPET_BIN}:#{ENV['PATH']}"

LOG_FILE = "#{ROOT_PATH}/logs/puppet-run.#{Date.today.strftime '%Y%m%d'}"

FileUtils.mkdir_p "#{ROOT_PATH}/logs"
FileUtils.mkdir_p "#{ROOT_PATH}/environments"

unless Dir.exist? "#{ROOT_PATH}/environments/production"
  FileUtils.ln_s "#{ROOT_PATH}/repo", "#{ROOT_PATH}/environments/production"
end

Dir.chdir "#{ROOT_PATH}/repo"

begin
  FileUtils.mkdir LOCKDIR_NAME
rescue Errno::EEXIST
  puts 'It appears a puppet-run is already in progress'
  puts "If this is not the case, run: rm -r #{ROOT_PATH}/repo/.lock"
  exit 1
end


def clean_exit(code = 1)
  FileUtils.rm_r "#{ROOT_PATH}/repo/#{LOCKDIR_NAME}"
  exit code
end

Signal.trap('INT') {
  clean_exit
}

Signal.trap('TERM') {
  clean_exit
}

def run_or_fail(cmd, err)
  return if system(cmd)
  puts err
  exit 1
end

if `git status -s`.empty?
  run_or_fail 'git pull', "Failed to update repo: #{ROOT_PATH}/repo"
  run_or_fail 'git submodule update --init', "Failed to update submodules: $REPO_PATH"
else
  puts "Repo is unclean: #{ROOT_PATH}/repo"
end

unless File.exist? "#{OPT_PUPPET_BIN}/bundle"
  system('gem', 'install', '--no-user-install', '--no-document', '--bindir', OPT_PUPPET_BIN, 'bundler')
end

system('bundle check') || run_or_fail('bundle install', 'Failed to update bundle')
system('bundle exec librarian-puppet install')

class Logger
  def initialize
    @handle = File.open(LOG_FILE, 'w')
    @stream = STDOUT
  end

  def write(line)
    stamp = DateTime.now.strftime('%Y-%m-%d %H:%M:%S')
    @handle << stamp + ' ' + line + "\n"
    @stream << line + "\n"
  end
end

logger = Logger.new

logger.write('STARTING RUN')

cmd = [
  'bundle',
  'exec',
  'puppet',
  'apply',
  "--confdir=#{ROOT_PATH}/repo",
  "--environment=#{PUPPET_ENV}",
  "#{ROOT_PATH}/environments/#{PUPPET_ENV}/manifests"
]
cmd << '--debug' if PUPPET_DEBUG
cmd << '--profile' if PUPPET_PROFILE


IO.popen(cmd, :err=>[:child, :out]) do |io|
  while (line = io.gets) do
    logger.write(line)
  end
end

logger.write('ENDING RUN')

clean_exit 0
